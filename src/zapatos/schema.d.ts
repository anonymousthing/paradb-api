/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v3.6.0), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

declare module 'zapatos/schema' {

  import type * as db from 'zapatos/db';

  // got a type error on schemaVersionCanary below? update by running `npx zapatos`
  export interface schemaVersionCanary extends db.SchemaVersionCanary { version: 101 }

  /* === schema: public === */

  /* --- enums --- */


  /* --- tables --- */

  export namespace maps {
    export type Table = 'maps';
    export interface Selectable {
      /**
      * **maps.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface JSONSelectable {
      /**
      * **maps.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string;
    }
    export interface Whereable {
      /**
      * **maps.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.ParentColumn | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment | db.ParentColumn>;
    }
    export interface Insertable {
      /**
      * **maps.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title: string | db.Parameter<string> | db.SQLFragment;
    }
    export interface Updatable {
      /**
      * **maps.title**
      * - `varchar` in database
      * - `NOT NULL`, no default
      */
      title?: string | db.Parameter<string> | db.SQLFragment | db.SQLFragment<any, string | db.Parameter<string> | db.SQLFragment>;
    }
    export type UniqueIndex = never;
    export type Column = keyof Selectable;
    export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
    export type SQLExpression = db.GenericSQLExpression | db.ColumnNames<Updatable | (keyof Updatable)[]> | db.ColumnValues<Updatable> | Table | Whereable | Column;
    export type SQL = SQLExpression | SQLExpression[];
  }

  /* === cross-table types === */

  export type Table = maps.Table;
  export type Selectable = maps.Selectable;
  export type JSONSelectable = maps.JSONSelectable;
  export type Whereable = maps.Whereable;
  export type Insertable = maps.Insertable;
  export type Updatable = maps.Updatable;
  export type UniqueIndex = maps.UniqueIndex;
  export type Column = maps.Column;
  export type AllTables = [maps.Table];
  export type AllMaterializedViews = [];


  export type SelectableForTable<T extends Table> = {
    maps: maps.Selectable;
  }[T];

  export type JSONSelectableForTable<T extends Table> = {
    maps: maps.JSONSelectable;
  }[T];

  export type WhereableForTable<T extends Table> = {
    maps: maps.Whereable;
  }[T];

  export type InsertableForTable<T extends Table> = {
    maps: maps.Insertable;
  }[T];

  export type UpdatableForTable<T extends Table> = {
    maps: maps.Updatable;
  }[T];

  export type UniqueIndexForTable<T extends Table> = {
    maps: maps.UniqueIndex;
  }[T];

  export type ColumnForTable<T extends Table> = {
    maps: maps.Column;
  }[T];

  export type SQLForTable<T extends Table> = {
    maps: maps.SQL;
  }[T];

}
